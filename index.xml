<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://hosny.ca/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hosny.ca/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://hosny.ca/Zettelkasten/Algorithms-CS-341/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Algorithms-CS-341/</guid><description>U&amp;mdash; title: &amp;ldquo;Algorithms - CS 341&amp;rdquo; draft: false Algorithms - CS 341 General paradigms
divide and conquer, Greedy algorithms, Dynamic programming, reductions Content [[Models of computation]] Algorithmic paradigms</description></item><item><title>3D printing</title><link>https://hosny.ca/Zettelkasten/3D-printing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/3D-printing/</guid><description>3D printing This could bring manufacturing closer to markets of products instead of parts being shipped globally. More on demand products manufacturing / variable production rates.</description></item><item><title>3sum</title><link>https://hosny.ca/Zettelkasten/3sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/3sum/</guid><description>3sum Problem: Find 3 unique indices in array, a, s.t. a[i] + a[j] + a[k] == 0
Solution (more direct from 2sum):</description></item><item><title>Adress spaces</title><link>https://hosny.ca/Zettelkasten/Adress-spaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Adress-spaces/</guid><description>Adress spaces Adress space contains the code, stack, and heap.
dynamic relocation each program has a base and bound register (implemented by hardware)</description></item><item><title>Algorithmic reductions</title><link>https://hosny.ca/Zettelkasten/Algorithmic-reductions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Algorithmic-reductions/</guid><description>Algorithmic reductions Using existing algorithms to solve new problems.
Solving X problem using algorithm Y which we treet as a [[Black box]] that solves problem Z correctly.</description></item><item><title>Andrew Huberman nutrition</title><link>https://hosny.ca/Zettelkasten/Andrew-Huberman-nutrition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Andrew-Huberman-nutrition/</guid><description>Andrew Huberman nutrition Andrew Huberman&amp;rsquo;s diet and supplement routine everybody! (-:
Specialty: For last +10 years: Intermittent Fasting (12 - 16 hours in total with sleep) after waking up until noon.</description></item><item><title>Big O notation</title><link>https://hosny.ca/Zettelkasten/Big-O-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Big-O-notation/</guid><description>Big O notation $f(n) \in O(g(n))$ If the exists constant $c$ and $n_0$ s.t. if $n &amp;gt; n_0$ then $f(n) &amp;lt; c \cdot g(n)$</description></item><item><title>Binary tree maximum path sum</title><link>https://hosny.ca/Zettelkasten/Binary-tree-maximum-path-sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Binary-tree-maximum-path-sum/</guid><description>Binary tree maximum path sum Problem: Find the maximum path sum in a binary tree
Solution:
at any node, best sum fromt this node is max left path: max(0, left-path-max) max right path: max(0, right-path-max) node max = node.</description></item><item><title>Blind 75 tracking list</title><link>https://hosny.ca/Zettelkasten/Blind-75-tracking-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Blind-75-tracking-list/</guid><description>Blind 75 tracking list Two Sum Longest substring without repeating characters [[Longest palindrome substring]] [[Container with most water]] [[3sum]] [[Remove nth element from back of list]] [[Valid parenthesis]] Merge two sorted lists [[Merge k-sorted lists]] Search in rotated sorted array Combination sum Rotate image Group anagrams Maximum subarray Spiral matrix [[Jump game]] [[Merge intervals]] [[Insert intervals]] [[Unique paths]] [[Climbing stairs]] Set matrix zeroes [[Minimum window substring]] [[Word search]] [[Decode ways]] [[Validate binary search tree]] [[Same tree]] [[Level order traversal]] [[Maximum depth of a binary tree]] [[ Construct binary tree from perorder and inorder traversal]] [[Best time to buy and sell stock]] [[Binary tree maximum path sum]] [[House robber]] [[House robber ii]] [[Longest Increasing Subsequence]] [[Coin change]] Not in unsorted blind 75 [[Combination sum iv]] References Blind 75 problems list: https://leetcode.</description></item><item><title>Bowling problem</title><link>https://hosny.ca/Zettelkasten/Bowling-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Bowling-problem/</guid><description>Bowling problem Problem: List of bowling pins with numeric scores, you can hit a bowling pin to get it&amp;rsquo;s points or hit two adjacent ones to get their product</description></item><item><title>Boxplots</title><link>https://hosny.ca/Zettelkasten/Boxplots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Boxplots/</guid><description>Boxplots How to make one
draw a box with sides at q(0.25) and q(0.75) draw a line in the box at the median draw lines where the smallest/largest observation is between 1.</description></item><item><title>CAP theorem</title><link>https://hosny.ca/Zettelkasten/CAP-theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/CAP-theorem/</guid><description>CAP theorem Theorem: A distributed system can only ever satisfy 2 of the following 3:
availability, consistency, partitian tolerance Availability: any live node in the system must respond to requests (cannot ignore them)</description></item><item><title>Central limit theorem</title><link>https://hosny.ca/Zettelkasten/Central-limit-theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Central-limit-theorem/</guid><description>Central limit theorem The mean of samples taken from a distribution (with defined distribution mean and variance) follow a normal distribution.</description></item><item><title>China demographic collapse</title><link>https://hosny.ca/Zettelkasten/China-demographic-collapse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/China-demographic-collapse/</guid><description>China demographic collapse China had lot&amp;rsquo;s of growth with a population that didn&amp;rsquo;t grow along with it. They are facing a population crisis where there isn&amp;rsquo;t enough economically productive workers.</description></item><item><title>Climbing stairs</title><link>https://hosny.ca/Zettelkasten/Climbing-stairs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Climbing-stairs/</guid><description>Climbing stairs Problem:
Solution:
Implementation:
References satus: #🟦 #🌱 date: 2021-11-13 tags: [[Programming question]], [[Leetcode]], [[Dynamic programming]]</description></item><item><title>Codeforces training</title><link>https://hosny.ca/Zettelkasten/Codeforces-training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Codeforces-training/</guid><description>Codeforces training Roadmap No real structure, do a lot of Div 2 virtuals + atcoder cyans for now.
References status: #🌱 date: 2022-04-26 tags: [[Motivation for competitive programming]], [[Competitive programming]], [[Algorithms]]</description></item><item><title>Coin change</title><link>https://hosny.ca/Zettelkasten/Coin-change/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Coin-change/</guid><description>Coin change Problem: given list of coins minimum number of coins needed to make amount, or -1 if impossible
Solution:</description></item><item><title>Condition variables</title><link>https://hosny.ca/Zettelkasten/Condition-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Condition-variables/</guid><description>Condition variables Allows a thread (or multiple) to sleep and wait on a condition to change to desired state thus waking one (or more) of the waiting threads up.</description></item><item><title>Container with most water</title><link>https://hosny.ca/Zettelkasten/Container-with-most-water/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Container-with-most-water/</guid><description>Container with most water Question: Given heights[n], find height[i] and height[j] which would hold most water (biggest area)
Solution:
Greedily use two pointers starting at opposite ends, iterate the one with lesser height Concept to reach solution:</description></item><item><title>Content</title><link>https://hosny.ca/Zettelkasten/Content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Content/</guid><description>Content Broad note for entries related to media worth consuming. Could be anything, book, website, user on reddit, music, etc&amp;hellip;</description></item><item><title>Context switching</title><link>https://hosny.ca/Zettelkasten/Context-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Context-switch/</guid><description>Context switching Very machine dependent
save program counter and integer values (always) References status: date: 2022-01-12 tags: Operating Systems - CS 350, Operating System</description></item><item><title>Course outline</title><link>https://hosny.ca/Zettelkasten/Course-outline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Course-outline/</guid><description>Course outline References status: #🌱 date: 2022-01-13 tags: [[]]</description></item><item><title>cs341 - final exam review</title><link>https://hosny.ca/Zettelkasten/cs341-final-exam-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/cs341-final-exam-review/</guid><description>cs341 - final exam review Recursion &amp;amp; Master theorem T(n) = a*T(n/b) + c * n^k
Theta(n^k) if a &amp;lt; b^k Theta(n^k log n) if a = b^k Theta(n^(log_b a)) if a &amp;gt; b^k Substitution Make a guess and inductively prove.</description></item><item><title>Database internals</title><link>https://hosny.ca/Zettelkasten/Database-internals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Database-internals/</guid><description>Database internals Content mainly based off (for now) Data base internals by Alex Petrov OReilly
Content There are two main subsections; storage engines - which deals with the single node implementations related to storing data / distributed systems - which deals with implementing multiple nodes and distributing the data.</description></item><item><title>Deadlocks</title><link>https://hosny.ca/Zettelkasten/Deadlocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Deadlocks/</guid><description>Deadlocks Deadlocks If we acquire locks in different orders we can have a deadlock situation.
1 2 3 4 5 6 7 8 9 10 Thread 1: acquire lock a acquire lock b unlock a unlock b Thread 2: acquire lock b acquire lock a unlock b unlock a here t1 can acquire a, t2 acquire b, then t1 stuck trying for b and t2 stuck trying for a It is convention to unlock in the order acquired Limited access (mutual exclusion - resource shared by finite users) No preemption (once resource granted, can&amp;rsquo;t be taken away) Multiple independent requests (hold and wait) don&amp;rsquo;t ask all at once (waits for next resource while holding one) Cirularity in graph of requests References status: #🌱 date: 2022-02-28 tags: [[Operating System]], [[Synchronisation primitives]], [[Operating Systems - CS 350]]</description></item><item><title>Determine if string can be segmented into dictionary words (Word Break)</title><link>https://hosny.ca/Zettelkasten/Determine-if-string-can-be-segmented-into-dictionary-words-Word-Break/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Determine-if-string-can-be-segmented-into-dictionary-words-Word-Break/</guid><description>Determine if string can be segmented into dictionary words (Word Break) Problem: Given a dictionary of words return true if a string s can be broken into the words</description></item><item><title>Divide and conquer</title><link>https://hosny.ca/Zettelkasten/Divide-and-conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Divide-and-conquer/</guid><description>Divide and conquer Dividing problems which scale worse than linearly in proportion to input problems s.t. the sub problems we solve are smaller and then use an efficient merge routine to combine subproblems.</description></item><item><title>Dynamic programming</title><link>https://hosny.ca/Zettelkasten/Dynamic-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Dynamic-programming/</guid><description>Dynamic programming Name meaning Dynamic programming is named because some guy wanted to hide the fact he was working on some research</description></item><item><title>Emperical commulative distribution function</title><link>https://hosny.ca/Zettelkasten/Commulative-distribution-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Commulative-distribution-function/</guid><description>Cummulative distribution function Empirical cummalitive distribution function (ecdf) or cdf Should be able to see the underlying histogram of data from a ecdf.</description></item><item><title>EndeavourOS install and setup</title><link>https://hosny.ca/Zettelkasten/EndeavourOS-install-and-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/EndeavourOS-install-and-setup/</guid><description>EndeavourOS install and setup Programs to install neovim obsidian md spotify brave kitty google chrome flameshot Install steps Generate ssh keys 1 2 ssh-keygen -t ed25519 -C &amp;#34;yhosnysa@uwaterloo.</description></item><item><title>Floating point numbers</title><link>https://hosny.ca/Zettelkasten/Floating-point-numbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Floating-point-numbers/</guid><description>Floating point numbers Any floating point number representation can only represnt a finite set of numbers. So for arbitrary real number x we must approximate it.</description></item><item><title>Gaussian distribution</title><link>https://hosny.ca/Zettelkasten/Gaussian-distribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Gaussian-distribution/</guid><description>Gaussian distribution If we assume a Guassian data fora given data then
sample mean and median should be close skewness close to 0 and kurtosis close 3 95% of observations lie within 2 standard deviations of the mean If any one of these fails by a large degree then it is usually sufficient to warrant concerns (does not follow gaussian)</description></item><item><title>Git submodule</title><link>https://hosny.ca/Zettelkasten/Git-submodule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Git-submodule/</guid><description>Git submodule 1 2 3 git submodule add -b &amp;lt;branch&amp;gt; &amp;lt;url&amp;gt; &amp;lt;relative_path_4m_root&amp;gt; git submodule add &amp;lt;url&amp;gt; &amp;lt;relative path&amp;gt; References status: #🔵 date: 2021-12-31 tags: [[Tutorial]], [[Git]]</description></item><item><title>Graph algorithms</title><link>https://hosny.ca/Zettelkasten/Graph-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Graph-algorithms/</guid><description>Graph algorithms n typically represents number of vertices (nodes). m is number of edges.
Notations degree(v) : for undirected graphs - number of edges with v indegree(v) : how many point into the vertex outdegree(v) : how many point out the vertex Definitions path: a sequence of vertices connected by edges cycle: a path that starts and endgs with the same vertex simple cycle: a cycle with no repeated vertices tree: a connected undirected graph without cycles connected: undirected graph if every vertex is joined by a path connected component: maximal connected subgraph Storing graphs Adjacency matrix: A[i, j] = 1 if (i, j) exists O(n^2) space Adjacency list: linked list for each vertex&amp;rsquo;s neighbours O(n + m) space !</description></item><item><title>Graphical data summaries</title><link>https://hosny.ca/Zettelkasten/Graphical-data-summaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Graphical-data-summaries/</guid><description>Graphical data summaries [[Histograms]] [[Commulative distribution function]] [[Boxplots]] [[Run chart]] [[Pie charts are bad]]
References status: date: 2022-01-13 tags: Statistics 241, Statistics</description></item><item><title>Greedy</title><link>https://hosny.ca/Zettelkasten/Greedy-algorithms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Greedy-algorithms/</guid><description>Greedy algorithms Examples:
[[Minimum number of coins to make change]] [[Maximum number of non-overlapping intervals]] Proving greedy algorithms There are two general techniques that could be used</description></item><item><title>Histograms</title><link>https://hosny.ca/Zettelkasten/Histograms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Histograms/</guid><description>Histograms Basic idea is to create a graphical summary that is comparable with a Probability density function].
the area of the bars should match the frequency (width=1 -&amp;gt; height=freq) usually intervals of equal width Relative frequency histogram the total area here will sum to 1 we divide the height of a regular histogram by the sample size References status: date: 2022-01-13 tags: Statistics</description></item><item><title>Home</title><link>https://hosny.ca/Zettelkasten/Home/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Home/</guid><description>Home [[University]] [[Personal performance]]
Entertainment [[TV Shows List]] [[Reading list]]
References status: #🌱 date: 2022-05-01 tags: [[]]</description></item><item><title>House robber</title><link>https://hosny.ca/Zettelkasten/House-robber/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/House-robber/</guid><description>House robber Problem:
Solution:
Implementation:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int dp(int i, vector&amp;lt;int&amp;gt; &amp;amp;memo, vector&amp;lt;int&amp;gt; &amp;amp;nums) { if (i &amp;gt;= nums.</description></item><item><title>House robber ii</title><link>https://hosny.ca/Zettelkasten/House-robber-ii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/House-robber-ii/</guid><description>House robber ii Problem:
Solution:
handle case at i == 0, send use two different memos Implementation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int dp(int i, int e, vector&amp;lt;int&amp;gt; &amp;amp;memo, vector&amp;lt;int&amp;gt; &amp;amp;memo2, vector&amp;lt;int&amp;gt; &amp;amp;nums) { if (i &amp;gt;= e) return 0; int &amp;amp;ret = memo[i]; if (ret !</description></item><item><title>IEEE standard</title><link>https://hosny.ca/Zettelkasten/IEEE-standard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/IEEE-standard/</guid><description>IEEE standard References https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html status: date: 2022-01-10 tags: [[]]</description></item><item><title>Insert intervals</title><link>https://hosny.ca/Zettelkasten/Insert-intervals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Insert-intervals/</guid><description>Insert intervals Question:
given list of sorted non-overlapping intervals, insert an interval Solution:
insert to the end of the list and run the same code for [[Merge intervals]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 intervals.</description></item><item><title>Internalizing ideas</title><link>https://hosny.ca/Zettelkasten/Internalizing-ideas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Internalizing-ideas/</guid><description>Internalizing ideas There is a difference between understanding a principle and internalizing it.
This relates to all ideas but is very apparent with behavioural concepts References status: #🌱 #🟩 date: 2021-11-28 tags: [[]]</description></item><item><title>Interpolation</title><link>https://hosny.ca/Zettelkasten/Interpolation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Interpolation/</guid><description>Interpolation Interpolate (guess a function) for a list of (x, y) pairs.
focus of application in cs370 is on interpolations applicability to computer graphics Polynomial interpolation Theorem: Given n data pairs (xi , yi), i = 1, .</description></item><item><title>Jiu jitsu</title><link>https://hosny.ca/Zettelkasten/Jiu-jitsu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Jiu-jitsu/</guid><description>Jiu jitsu Need to make a training plan/goals for BJJ.
References status: #🌱 date: 2022-03-19 tags: [[]]</description></item><item><title>Job interview tracking</title><link>https://hosny.ca/Zettelkasten/Job-interview-tracking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Job-interview-tracking/</guid><description>Job interview tracking Tracking job interviews I&amp;rsquo;ve had.
2022 ❌ Akuna C++ Intern , (find a valley, implement std::vector) I could have passed this if I put a little more effort in.</description></item><item><title>Jump game</title><link>https://hosny.ca/Zettelkasten/Jump-game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Jump-game/</guid><description>Jump game Problem: a[i] is how far u can jump, can you reach the end of the list
Solution:
Notice the limiting factor is when a[i] == 0.</description></item><item><title>Karatsuba multiplication</title><link>https://hosny.ca/Zettelkasten/Karatsuba-multiplication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Karatsuba-multiplication/</guid><description>Karatsuba multiplication References status: #🌱 date: 2022-01-22 tags: [[]]</description></item><item><title>Kernel scheduling</title><link>https://hosny.ca/Zettelkasten/Operating-system-scheduler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-system-scheduler/</guid><description>Kernel (OS) scheduler There are different ways of deciding how to schedule processes.
some options, FIFO/Round-robin, priorities etc.. References status: date: 2022-01-12 tags: Operating System, Operating Systems - CS 350</description></item><item><title>Kinematic equations</title><link>https://hosny.ca/Zettelkasten/Kinematic-equations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Kinematic-equations/</guid><description>Kinematic equations Assuming constant acceleration (const a)
$v = v_0 + a \cdot t$ $\Delta x = v_0 \cdot t + \frac{1}{2} \cdot a \cdot t^2$ $v^2 = v_0^2 + 2 a \Delta x$ $\bar{v}t = \Delta x$ $\Delta x = \frac{v_0 + v}{2} \cdot t$ References status: #🌱 date: 2022-01-08 tags: Physics 1 - Phys 111, [[Physics]]</description></item><item><title>Leetcode</title><link>https://hosny.ca/Zettelkasten/Leetcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Leetcode/</guid><description>Leetcode Meta note for solutions to link to.
References status: #🌱 date: 2022-08-12 tags: [[]]</description></item><item><title>Level order traversal</title><link>https://hosny.ca/Zettelkasten/Level-order-traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Level-order-traversal/</guid><description>Level order traversal Problem:
return level order values of a binary tree Solution:
bfs and save each level in a vector Implementation:</description></item><item><title>Likelihood function for independent experiments</title><link>https://hosny.ca/Zettelkasten/Likelihood-function-for-independent-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Likelihood-function-for-independent-experiments/</guid><description>Likelihood function for independent experiments If we assume the experiments are independent then $P(A \cap B) = P(A)\cdot P(B)$
So we multiply their likelihood functions and maximize that to maximize their combined probability.</description></item><item><title>Limited direct execution</title><link>https://hosny.ca/Zettelkasten/Limited-direct-execution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Limited-direct-execution/</guid><description>Limited direct execution The idea is to let processes run directly on the CPU with limitations
in user mode a process cannot access certain instructions / IO The OS will start the Process creation.</description></item><item><title>Linear algebra</title><link>https://hosny.ca/Zettelkasten/Numerical-linear-algebra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Numerical-linear-algebra/</guid><description>Linear algebra Solving systems of equations using [[Gaussian elimination]]
so Gaussian elimination factors A into product of upper and lower unit diagonal matrices if you save the multipliers in the lower triangular part of the matrix when performing Gaussian elimination you end up with L (A = LU factorization) Solving linear systems computationally we perform A = LU factorization then use forward and back solves</description></item><item><title>Linux setup</title><link>https://hosny.ca/Zettelkasten/Linux-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Linux-setup/</guid><description>Linux setup Distro Endeavour OS ([[EndeavourOS install and setup]]) arch linux without having to deal with install process Window manager DWM simple, minimal and already effective probably use Luke Smith&amp;rsquo;s dwm build i3 more resources for using it official documentation here: https://discovery.</description></item><item><title>LLVM</title><link>https://hosny.ca/Zettelkasten/LLVM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/LLVM/</guid><description>LLVM A set of tools / a library for developing compilers
provides front-end and back-end tools to compile down to different machines An abstraction to allow for creation of compiler-like functionality.</description></item><item><title>Lock-based data structures</title><link>https://hosny.ca/Zettelkasten/Lock-based-data-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Lock-based-data-structures/</guid><description>Lock-based data structures Data structures that with locks to enable concurrent use of them.
Counters We have concurrent counters with locks.</description></item><item><title>Longest common subsequence</title><link>https://hosny.ca/Zettelkasten/Longest-common-subsequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Longest-common-subsequence/</guid><description>Longest common subsequence Problem: Given two sequences find longest common subsequence
Solution Using [[Recursive algorithm]]
Subproblem: LCS of some suffix of A and some suffix of B (using indices i, j) LCS(i, j) = LCS(A[i:], B[j:]) Relate: if A[i] == B[i] : 1 + L(i+1, j+1) else: max(L(i+1, j), L(i, j+1)) Topological L(|A|, j) = 0 = L(i, |B|) Base case Original problem via subproblem Implementation:</description></item><item><title>Longest Increasing Subsequence</title><link>https://hosny.ca/Zettelkasten/Longest-Increasing-Subsequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Longest-Increasing-Subsequence/</guid><description>Longest Increasing Subsequence Problem: Find the longest increasing subsequence
This can be reduced to [[Longest common subsequence]] by matching sequence against its sorted version still O(n^2)</description></item><item><title>Markov matrices</title><link>https://hosny.ca/Zettelkasten/Markov-matrices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Markov-matrices/</guid><description>Markov matrices Columns add to 1. Each value represents probability.
References status: #🌱 date: 2022-02-03 tags: [[Page rank algorithm]]</description></item><item><title>Master theorem</title><link>https://hosny.ca/Zettelkasten/Master-theorem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Master-theorem/</guid><description>Master theorem Rough proof idea: notice each level has a denominator of $b^k$ and coeffcient $a$ if $a &amp;lt; b^k$ then each level is getting exponentially smaller than the previous level.</description></item><item><title>Maximum depth of a binary tree</title><link>https://hosny.ca/Zettelkasten/Maximum-depth-of-a-binary-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Maximum-depth-of-a-binary-tree/</guid><description>Maximum depth of a binary tree Problem:
return maximum depth of a binary tree Solution:
dfs and save biggest depth Implementation:</description></item><item><title>Maximum likelihood estimation</title><link>https://hosny.ca/Zettelkasten/Maximum-likelihood-estimation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Maximum-likelihood-estimation/</guid><description>Maximum likelihood estimation Given some some sample data and some unknown probability $\theta$. We find $\theta$ s.t. maximize the probability that the given data is observed.</description></item><item><title>Measure of central tendancy or location</title><link>https://hosny.ca/Zettelkasten/Measure-of-central-tendancy-or-location/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Measure-of-central-tendancy-or-location/</guid><description>Measure of central tendancy or location Numerical measures of the centre of data
sample mean, median, mode do not just write mean if it is a sample mean mean (without sample) usually refers to theoretical means of distributions i.</description></item><item><title>Measure of variability or dispersion</title><link>https://hosny.ca/Zettelkasten/Measures-of-variability-or-dispersion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Measures-of-variability-or-dispersion/</guid><description>Measures of variability or dispersion Sample variance $$s^2 = \frac{1}{n-1}\Sigma^n_{i=1}(y_i-\bar{y})^2 = \cdots$$
notes the n-1 which is just n in the population variance References status: date: 2022-01-11 tags: Statistics 241, Statistics</description></item><item><title>Merge intervals</title><link>https://hosny.ca/Zettelkasten/Merge-intervals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Merge-intervals/</guid><description>Merge intervals Question:
given list of intervals merge them so that there is a minimum number of them (combine overlapping segments) Solution:</description></item><item><title>Merge k-sorted lists</title><link>https://hosny.ca/Zettelkasten/Merge-k-sorted-lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Merge-k-sorted-lists/</guid><description>Merge k-sorted lists problem: given array of k linked lists in ascending order, merge them into one sorted linked-list
n is number of lists, k is number of elements in lists</description></item><item><title>Method of moment estimates</title><link>https://hosny.ca/Zettelkasten/Method-of-moment-estimates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Method-of-moment-estimates/</guid><description>Method of moment estimates For a Gaussian the method of moments estimate is the same as the [[Maximum likelihood estimation]].</description></item><item><title>Minimum window substring</title><link>https://hosny.ca/Zettelkasten/Minimum-window-substring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Minimum-window-substring/</guid><description>Minimum window substring Problem: Minimum substring which contains all letters of another string t
Solution:
sliding window, iterate right till all letters are found iterate left as much as possible without losing required letter else iterate right Implementation:</description></item><item><title>Models of computation</title><link>https://hosny.ca/Zettelkasten/Models-of-computation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Models-of-computation/</guid><description>Models of computation Random Access Machine (RAM) model &amp;ldquo;random access&amp;rdquo; means we access memory location i in 1 time step We need to account for &amp;ldquo;size&amp;rdquo; of a memory location</description></item><item><title>Multiprogramming process states</title><link>https://hosny.ca/Zettelkasten/Multiprogramming-process-states/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Multiprogramming-process-states/</guid><description>Multiprogramming process states notice a ready process can only go running from ready notice a waiting process can only go ready (it must wait to be scheduled can&amp;rsquo;t just resume once unblocked) Waiting is sometimes called the blocked state</description></item><item><title>Normalized form</title><link>https://hosny.ca/Zettelkasten/Normalized-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Normalized-form/</guid><description>Normalized form $$0.d_1d_2d_3\cdots \times \beta^p$$ 123.4 -&amp;gt; $0.1234 \cdot 10^3$
1234 is the mantissa 3 the exponent 10 is the base First digit after the decimal must be non-zero</description></item><item><title>NP and NP-Complete</title><link>https://hosny.ca/Zettelkasten/NP-and-NP-Complete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/NP-and-NP-Complete/</guid><description>NP and NP-Complete Non-deterministic polynomial time Decision problem If the answer is yes we can check it is correct in polynomial time NP-complete NP problems that are poly-reducable to each other.</description></item><item><title>Numerical Computation - CS 370</title><link>https://hosny.ca/Zettelkasten/Numerical-Computation-CS-370/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Numerical-Computation-CS-370/</guid><description>Numerical Computation - CS 370 Grading 5 assignments = 70% (first one is 10% rest are 15%) midterm 10% final 20% Best mark of final used for 30% if higher than midterm</description></item><item><title>Operating System</title><link>https://hosny.ca/Zettelkasten/Operating-System/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-System/</guid><description>Operating System An operating system is an abstraction of physical resources.
resource manager, virtual machine (virtualizes the physical hardware) Three pieces of an OS [[Virtualization]]</description></item><item><title>Operating system threads</title><link>https://hosny.ca/Zettelkasten/Operating-system-threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-system-threads/</guid><description>Operating system threads A thread is abstractly similar to a process. Threads allow concurrenct within a userspace whereas processes allow concurrency in the kernel space by running multiple programs concurrently.</description></item><item><title>Operating system timer</title><link>https://hosny.ca/Zettelkasten/Operating-system-timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-system-timer/</guid><description>Operating system timer The hardware has a timer which executes a specific code which is defined on boot by the trap table see Operating system trap</description></item><item><title>Operating system trap</title><link>https://hosny.ca/Zettelkasten/Operating-system-trap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-system-trap/</guid><description>Operating system trap A trap is a request for the CPU to interrupt current code and elevate to kernel mode</description></item><item><title>Operating Systems - CS 350</title><link>https://hosny.ca/Zettelkasten/Operating-Systems-CS-350/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Operating-Systems-CS-350/</guid><description>Operating Systems - CS 350 Grading quizes (5%), assignments (60%), midterm (15%), final (20%) [[Adress spaces]]
Content - [[Multiprogramming process states]], [[Process control block]], [[Zettelkasten/Context switch]], [[Zettelkasten/Process calls to kernel]] Concurrency &amp;amp; Synchronization Scheduling Virtual Memory I/O Disks, File systems, Network file systems Protection &amp;amp; Security Virtual machines Will often use Unix as the example Most OSes heavily influenced by Unix (e.</description></item><item><title>Page rank algorithm</title><link>https://hosny.ca/Zettelkasten/Page-rank-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Page-rank-algorithm/</guid><description>Page rank algorithm Algorithm for ranking web pages
We use [[Markov matrices]] to represent probailities that we view a certain web page.</description></item><item><title>Physics 1 - Phys 111</title><link>https://hosny.ca/Zettelkasten/Physics-1-Phys-111/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Physics-1-Phys-111/</guid><description>Physics 1 - Phys 111 Grading Introduce Yourself Ungraded Course Outline Quiz 1% Pre/Post Course Quiz (Participation mark) 4% Pre-Class Assignments (Participation mark) 0-10%* Assignments 0-10%* iClicker Classes (Participation mark) 0-5%* Group Worksheet Activity (Participation mark) 10% Group Work Videos 10% Peer Review 5% Weekly Quizzes 10% Midterm 10-15%* Final Exam 20-50%*</description></item><item><title>Poisson distribution</title><link>https://hosny.ca/Zettelkasten/Poisson-distribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Poisson-distribution/</guid><description>Poisson distribution Maximum likelihood estimate is the mean of the data
References status: #🌱 date: 2022-01-26 tags: [[]]</description></item><item><title>Polynomial reduction</title><link>https://hosny.ca/Zettelkasten/Polynomial-reduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Polynomial-reduction/</guid><description>Polynomial reduction $X \leq_{p} Y$
X reduces to Y if a polynomial reduction exists to reduce X to Y X is &amp;ldquo;easier&amp;rdquo; than Y (i.</description></item><item><title>PPDAC study process</title><link>https://hosny.ca/Zettelkasten/PPDAC-study-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/PPDAC-study-process/</guid><description>PPDAC study process Problem -&amp;gt; Plan -&amp;gt; Data -&amp;gt; Analysis -&amp;gt; Conclusion
Problem and Plan step are the very critical part of desigining a study.</description></item><item><title>Prim's algorithm</title><link>https://hosny.ca/Zettelkasten/Prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Prims-algorithm/</guid><description>Prim&amp;rsquo;s algorithm References status: #🌱 date: 2022-03-15 tags: [[Graph algorithms]], [[Algorithms]]</description></item><item><title>Probability density function</title><link>https://hosny.ca/Zettelkasten/Probability-density-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Probability-density-function/</guid><description>Probability density function Integral of a PDF is equal to 1.
References status: #🌱 date: 2022-01-11 tags: Statistics 241, Statistics, [[Probability]]</description></item><item><title>Probability distributions</title><link>https://hosny.ca/Zettelkasten/Probability-distributions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Probability-distributions/</guid><description>Probability distributions Binomial $f(y: \theta) = {n \choose y} \theta^{y} \cdot (1 - \theta)^{n - y}$ Exponential $f(y; \theta) = \frac{1}{\theta} e^{\frac{-y}{\theta}}$ Geometric Uniform Gaussian $Y \sim G(\mu, \sigma)$ or $Y \sim N(\mu, \sigma^2)$ Poisson (random events in time/space) Discrete distributions summary !</description></item><item><title>Process control block</title><link>https://hosny.ca/Zettelkasten/Process-control-block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Process-control-block/</guid><description>Process control block A fancy term for a C struct which contains key information about a process.
sometimes called a process descriptor Example process control block:</description></item><item><title>Process creation</title><link>https://hosny.ca/Zettelkasten/Process-creation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Process-creation/</guid><description>Process creation Load code and static data into from disk/SSD into memory Earlier OS&amp;rsquo;s would load everything at once.</description></item><item><title>Processes</title><link>https://hosny.ca/Zettelkasten/Processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Processes/</guid><description>Processes A process is a program that is running on the OS (a program that is running is a process).</description></item><item><title>Proof that travelling salesman problem can't be approximated</title><link>https://hosny.ca/Zettelkasten/Proof-that-travelling-salesman-problem-cant-be-approximated/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Proof-that-travelling-salesman-problem-cant-be-approximated/</guid><description>Proof that travelling salesman problem can&amp;rsquo;t be approximated we prove that TSP can&amp;rsquo;t be approximated well by showing an approximation for TSP -&amp;gt; Hamiltion Cycle is solvable in poly-time assume some algorithm A approximates TSP with factor p then create a new graph G&amp;rsquo; which has edge-weights 1 if the edge is in G, otherwise edge weight of p*|V(G)| + 1 then approximating TSP on this graph returns an optimal answer within a factor of optimal solution if no hamiltonian cycle exists then the TSP on G&amp;rsquo; is going to be at least |V(G)| - 1 + p*|V(G)| + 1 = 2p|V(G)| &amp;gt; p|V(G)| similarly if a hamiltonian cycles exists then approximation algorithm on TSP must be less than p|V(G)| so if approximation algorithm returns value &amp;lt; p|V(G)| hamiltonian cycle exists</description></item><item><title>Publishing obsidian vault for free</title><link>https://hosny.ca/Zettelkasten/Publishing-obsidian-vault-for-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Publishing-obsidian-vault-for-free/</guid><description>Publishing obsidian vault for free Goal To pubish Obsidian notes online on my website in a way that is free and doesn&amp;rsquo;t introduce a dependency on a specific closed source tool / software.</description></item><item><title>qqplot</title><link>https://hosny.ca/Zettelkasten/qqplot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/qqplot/</guid><description>qqplot ![[Pasted image 20220126200215.png]] We plot the observed quantile on the y axis and theoretical quantile on the x axis. A perfect fit is a perfect straight line, this plotting allows us to analyze the fit better since we only need to see how &amp;ldquo;straight&amp;rdquo; the line is.</description></item><item><title>Reading list</title><link>https://hosny.ca/Zettelkasten/Reading-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Reading-list/</guid><description>Reading list The art of learning waitzkin References status: #💭 date: 2021-11-28 tags: [[]]</description></item><item><title>Recursive algorithm</title><link>https://hosny.ca/Zettelkasten/Recursive-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Recursive-algorithm/</guid><description>Recursive algorithm Recursive algorithm design Define a subproblem (state what it computes not just how to) Relate subproblems recursively Topological order to make sure subproblem dependencies are acyclic Base cases of the recursion Solve original problem via subproblem Defining subproblems If input is a sequence some good options for subproblems are:</description></item><item><title>Relative likelihood function</title><link>https://hosny.ca/Zettelkasten/Relative-likelihood-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Relative-likelihood-function/</guid><description>Relative likelihood function $\hat{\theta}$ is the maximum likelihood probability.
Relative likelihood function $$R(\theta) = \frac{L(\theta)}{L(\hat{\theta})}$$
notice the denominator is a constant There is a log-likelihood function just $\log{L(\theta)}$</description></item><item><title>Remove nth element from back of list</title><link>https://hosny.ca/Zettelkasten/Remove-nth-element-from-back-of-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Remove-nth-element-from-back-of-list/</guid><description>Remove nth element from back of list Solution:
Use two pointers: one fast one that is iterated n times initially then iterate the two until fast one is at the end, then the slow one is at end - n note: if the fast reaches end in initial iterations then the element is the first element and we must delete it through return head-&amp;gt;next 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int count = n; ListNode* tail = head; ListNode* cur = head; while (count--) { tail = tail-&amp;gt;next; } if (tail == nullptr) return head-&amp;gt;next; while (tail-&amp;gt;next !</description></item><item><title>Run chart</title><link>https://hosny.ca/Zettelkasten/Run-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Run-chart/</guid><description>Run chart Basically value over time (canadian dollar vs. usd)
References status: #🌱 date: 2022-01-13 tags: [[]]</description></item><item><title>Same tree</title><link>https://hosny.ca/Zettelkasten/Same-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Same-tree/</guid><description>Same tree Problem:
check two binary trees are the same Solution:
dfs check each one node is equal Implementation:</description></item><item><title>Sample correlation</title><link>https://hosny.ca/Zettelkasten/Sample-correlation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Sample-correlation/</guid><description>Sample correlation The sample correlation is a measure of a linear relationship
Interpretation
if the value of r is close to 1 we have a strong positive linear relationship if the value of r is close to 0 we have no linear relationship if the value of r is close to -1 we have a strong negative linear relationship Why is $$[(x_i - \bar{x})(y_i - \bar{y})]$$ positive with positive correlation and ndegative with negative relationship.</description></item><item><title>Sample kurtosis</title><link>https://hosny.ca/Zettelkasten/Sample-kurtosis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Sample-kurtosis/</guid><description>Sample kurtosis Sample kurtosis = $$\frac{\frac{1}{n}\Sigma_{i=1}^n(y_i - \bar{y})^4}{[\frac{1}{n}\Sigma_{i=1}^n(y_i-\bar{y})^2]^2}$$
Visually Large kurtosis characterstics
large tails large peak If the data is generated from Gaussian distribution -&amp;gt; kurtosis should be close to 3.</description></item><item><title>Sample skewness</title><link>https://hosny.ca/Zettelkasten/Sample-skewness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Sample-skewness/</guid><description>Sample skewness sample skewness $$\frac{\frac{1}{n}\Sigma^n_{i=1}(y_i-\bar{y})^3}{[\frac{1}{n}\Sigma_{i=1}^n(y_i-\bar{y})^2]^\frac{3}{2}}$$
If our data is symmetric $y_i - \bar{y}$ term will have an equivalent opposite sign term which cancels it out to 0.</description></item><item><title>Semaphores</title><link>https://hosny.ca/Zettelkasten/Semaphores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Semaphores/</guid><description>Semaphores sem_wait() decrements and sleeps if value is negative - sem_post() increments value
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int sem_wait(sem_t *s) { // decrement the value of semaphore s by one // wait if value of semaphore s is negative } int sem_post(sem_t *s) { // increment the value of semaphore s by one // if there are one or more threads waiting, wake one } sem_t m; sem_init(&amp;amp;m, 0, X); // initialize to X; what should X be?</description></item><item><title>Solving recurrence relations</title><link>https://hosny.ca/Zettelkasten/Solving-recurrence-relations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Solving-recurrence-relations/</guid><description>Solving recurrence relations Two basic approaches
recursion tree method guess a solution and prove by induction [[Master theorem]]</description></item><item><title>Statistical models</title><link>https://hosny.ca/Zettelkasten/Statistical-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistical-models/</guid><description>Statistical models &amp;ldquo;All models are incorrect, but some are useful&amp;rdquo; - George Box
References status: #🌱 date: 2022-01-18 tags: Statistics 241, Statistics</description></item><item><title>Statistical moment</title><link>https://hosny.ca/Zettelkasten/Statistical-moment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistical-moment/</guid><description>Statistical moment Definition . The nth moment of a random variable X is defined to be $E[Xn]$. The nth central moment of $X$ is defined to be $E[(X−EX)n]$.</description></item><item><title>Statistical study errors</title><link>https://hosny.ca/Zettelkasten/Statistical-study-errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistical-study-errors/</guid><description>Statistical study errors The target population is not the same as the study population, so there is an error when trying to approximate the target via a study sample.</description></item><item><title>Statistics 241</title><link>https://hosny.ca/Zettelkasten/Statistics-241/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistics-241/</guid><description>Statistics 241 Online exams will be open book A list of [[Zettelkasten/Statistics definitions]]
[[Statistics notations]]
Should be very comfortable with the [[Central limit theorem]]</description></item><item><title>Statistics definitions</title><link>https://hosny.ca/Zettelkasten/Statistics-definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistics-definitions/</guid><description>Statistics definitions List of statistics words and their definitions.
Warning: common mistakes on exams are definitions that are not precise</description></item><item><title>Statistics notations</title><link>https://hosny.ca/Zettelkasten/Statistics-notations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Statistics-notations/</guid><description>Statistics notations We use lower case letters for observations
Ordered sample
$y_{(1)} \cdots y_{(n)}$ denotes the ordered samples i.e $y_{(i)}&amp;lt;y_{(i+1)}$ Assymetry of distribution leads to the difference between mean and median.</description></item><item><title>Supplement stack</title><link>https://hosny.ca/Zettelkasten/Supplement-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Supplement-stack/</guid><description>Supplement stack Supplements:
multivitamin Vitamin D x 5000 IU Omega 3 x 3000 Iron Ashwaganda KSM-66 x 600mg 2g l-carnitine status: date: 2021-11-25 tags: [[Health]], [[Personal performance]]</description></item><item><title>Synchronisation primitives</title><link>https://hosny.ca/Zettelkasten/Synchronisation-primitives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Synchronisation-primitives/</guid><description>Synchronisation primitives Performing groups of instructions together as atomic is an important concept. They are always seen as either all completed or none, never inbetween state.</description></item><item><title>Tag Taxonomy</title><link>https://hosny.ca/Zettelkasten/Tag-taxonomy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Tag-taxonomy/</guid><description>Tag Taxonomy Nested tag system for tagging notes
📥 Inbox | inputs i.e, entries that I will be working on (not flushed out evergreen yet) 📚 | Note on a concept that already exists Note&amp;rsquo;s of a video / podcast / book are all grouped here (separating them seems contradictory with conceptual note taking) 💭 | Thought i.</description></item><item><title>Thread API</title><link>https://hosny.ca/Zettelkasten/Thread-API/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Thread-API/</guid><description>Thread API pthread_create(), pthread_join()
See [[Thread locks]]
1 2 3 4 pthread_mutex_t lock; pthread_mutex_lock(&amp;amp;lock); x = x + 1; // or whatever your critical section is pthread_mutex_unlock(&amp;amp;lock); this code is broken need to initialize the lock and check error code [[Condition variable]]</description></item><item><title>Thread locks</title><link>https://hosny.ca/Zettelkasten/Thread-locks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Thread-locks/</guid><description>Thread locks A lock is available or acquired
available: unlocked or free acquired: locked or held (by us) Evaluating locks Correctness: They provide mutual exculsion (mutex) Fairness: A thread waiting for a lock eventually gets it (no starvation) Performance: CPU cycle efficiency Naive locks (no special hardware) We can use a flag and simply spin (infinite loop checking flag==1) when trying to lock the flag.</description></item><item><title>TV Shows List</title><link>https://hosny.ca/Zettelkasten/TV-Shows-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/TV-Shows-List/</guid><description>TV Shows List Currently watching Attack on Titan Peaky Blinders Succession Game of Thrones Watch queue Better Call Saul Mr Robot Fargo The wire Westworld Chernobyl The sopranos Dark Billions Jujitsu kaisen Narcos Mexico Favourites List Breaking Bad Peaky Blinders Attack on Titan Prison Break Mr Robot Succession Fargo Sherlock Game of Thrones Black Mirror Love Death Robots (Season 1) Stranger Things (Season 1) References status: date: 2021-12-29 tags: [[]]</description></item><item><title>Unique paths</title><link>https://hosny.ca/Zettelkasten/Unique-paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Unique-paths/</guid><description>Unique paths Problem:
Solution:
Implementation:
1 2 3 4 5 6 7 8 int uniquePaths(int m, int n) { int dp[m]; fill(dp, dp + m, 1); for (int j = 1; j &amp;lt; n; ++j) for (int i = 1; i &amp;lt; m; ++ i) dp[i] = dp[i] + dp[i-1]; return dp[m - 1]; } References satus: #🟦 #🌞 date: 2021-11-24 tags: [[Programming question]], [[Leetcode]]</description></item><item><title>User process calls to kernal</title><link>https://hosny.ca/Zettelkasten/Process-calls-to-kernel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Process-calls-to-kernel/</guid><description>User process calls to kernal User process is running and realizes it needs to do something that requires kernal mode (priviledged operations).</description></item><item><title>Valid parenthesis</title><link>https://hosny.ca/Zettelkasten/Valid-parenthesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Valid-parenthesis/</guid><description>Valid parenthesis Problem: check input of ( { [ are all matched and closed
Solution:
insert opening braces into stack pop stack on closing brace and check it matches if stack is empty return false if stack is not empty at the end return false Implementation:</description></item><item><title>Validate binary search tree</title><link>https://hosny.ca/Zettelkasten/Validate-binary-search-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Validate-binary-search-tree/</guid><description>Validate binary search tree Problem: validate a given tree is a bst
Solution:
keep track of min and max values traversing from the top when going left max value should be current, min stays the same when going right min value should be current, max stays the same worse:</description></item><item><title>Variates</title><link>https://hosny.ca/Zettelkasten/Variates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Variates/</guid><description>Variates Variates: characteristics of units usually represented with X, Y, Z continuous - those that can theoretically be measured to infinite accuracy (height, weight, time)</description></item><item><title>Virtual memory</title><link>https://hosny.ca/Zettelkasten/Virtual-memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Virtual-memory/</guid><description>Virtual memory Goals
transparency : processes shouldn&amp;rsquo;t be able to tell they&amp;rsquo;re in virtual memory efficiency : space and time efficiency of virtualization protection : processes shouldn&amp;rsquo;t be able to affect each other Address space Contains all the data required to run a program (code, stack, heap)</description></item><item><title>Word search</title><link>https://hosny.ca/Zettelkasten/Word-search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hosny.ca/Zettelkasten/Word-search/</guid><description>Word search Problem: Return true if a word exists in a grid (can be formed sequentially in any adjacent direction)</description></item></channel></rss>